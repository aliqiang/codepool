--scala函数
  -- 语法
    --1.非匿名
      def f([形参list]):[输出类型]={方法体}
      举例：
        1. def f(x:Int,y:Int):Int={return x*y}
          --很标准的格式，有输入、有输出
        
        2. def f(x:Int,y:Int)={println("hello")}
          -- 无输出
        3. def f()={println("hello")}
          --无输入
          --当然也可以更简单写法：def f={println("hello")},不过再应用函数f的时候，也不能加（）
          
        4. def f()= println("hello")
          --方法体只有一行，可以去掉大括号
      
    --2.匿名函数
      (参数list) => 方法体
      举例：
        1. var f = (x:Int,y:Int) => {println(x);println(y);x*y}
        -- 有输入
        2. var f = () => {2*3}
        -- 无输入
        3. var f = () => 2*3
         --方法体只有一行，去掉大括号
    --3.泛型
    参数类型不是确定的，用一个泛型类型代替
    例子：
      def f[T](x:T):[]={}
      
      上边界:泛型类型是某个类的子类，使用<:parent_class表示
      def f[T<:Int](x:T):[]={}
      
      下边界:泛型类型是某个类的父类，使用>:sub_class表示
      def f[T>:Int](x:T):[]={}
    
    --4. 函数名作为形参
      def f(名称:匿名函数定义)={函数体}
      举例：
        1. def f1(f:()=>Int)={f()}
        
    --5. 指定参数名传参
      传参的时候可以带上参数名称，这样就不需要按照顺序赋值
      例子：
        函数定义：def f(x:Int,y:Int)={x*y}
        函数调用：f(y=1,x=2)
    --6.参数默认值
      参数初始化默认值
      例子：
        def f(x:Int=5,y:Int=4)={x*y}
        
    -- 
        
    
