--变量
 后续可以改变
 var 变量名:类型[=初始值]
 例子：
  var a:Int = 123
-- 常量
  后续不能赋值 
  val 常量名:类型[=初始值]
  例子：
    val a:Int = 123
    a = 456;   //错误，不能再赋值

--for 遍历
	不支持break
	https://www.runoob.com/scala/scala-break-statement.html
	for (i <- 0 to 9 ) println(i)
	for (i <- 0 to 9 by 2 ) println(i)
	for (i <- 0 to 9;if i > 1) println(i)



--元组
	--tuple2支持两个元素，最大是tuple22，支持22个元素
	val t:tuple2[String,Int]=("abc",123)
	 	--元组访问: t._n(n是从1开始)
		  t._1  //abc
		  t._2 //123
	--元组解析
	var (a,b) = t

--数组
  定义方式1
	  var list:Array[String] = Array[String](3)
	  list(1) = "abc"
	  println(list(1))
  
  定义方式2 
	  var list = Array("abc","bcd") 
	  println(list(1))
  
  遍历
  	for(i <- list){println(i)}
  
  生成新的数组
  	var newt = for(i <- 0 to 9 if i % 2 = 0 ) yield i
  
   
--list
	后台是通过链表实现，而且是不可以改变的，如果需要新增或者删除数据，会生成一个新的list
	var l = List(1,2,3,4) //等价于 1::2::3::4::Nil
	for(i <- l) println(i)
	不适合索引访问，比如l(999)，但是vector适合
	
	如果需要在原表上增加删减使用arraybuffer，使用+= 添加
	var ar:ArrayBuffer[Int] = ArrayBuffer();
	ar += 1
	ar += 2
	
--map
     https://www.runoob.com/scala/scala-maps.html
    var m = Map("a" -> 1,"b" -> 2)
    m += "c" -> 3
    println(m("c"))
    m.foreach((k) => println(k._1+":"+k._2))
     
     
    

--set


  
